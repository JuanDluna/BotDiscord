// slash_commands/recommend.js
const { SlashCommandBuilder } = require('@discordjs/builders');
const { spotifyApi, getAccessToken, refreshAccessToken } = require('../functions/spotify'); // Aseg√∫rate de tener esta configuraci√≥n para usar Spotify

module.exports = {
    data: new SlashCommandBuilder()
        .setName('recommend')
        .setDescription('Recomienda una canci√≥n de Spotify basada en tus gustos.')
        .addStringOption(option =>
            option.setName('genre')
                .setDescription('El g√©nero de m√∫sica que te interesa (por ejemplo: pop, rock, hip-hop)')
                .setRequired(false)
        ),
    async execute(interaction) {
        const genre = interaction.options.getString('genre');
        let accessToken = getAccessToken(); // Obtener el token de acceso de Spotify

        // Si no tenemos el token de acceso, lo refrescamos
        if (!accessToken) {
            accessToken = await refreshAccessToken();
            if (!accessToken) {
                return interaction.reply('‚ùå No se pudo obtener el token de acceso de Spotify. Intenta vincular tu cuenta de Spotify con !link.');
            }
        }

        try {
            // Si el usuario proporciona un g√©nero, buscamos canciones de ese g√©nero
            let searchQuery = genre ? `genre:${genre}` : 'pop'; // Si no se da un g√©nero, por defecto se buscar√°n canciones pop

            // Buscar canciones en Spotify usando la API, limitando la b√∫squeda a 20 canciones
            const searchResults = await spotifyApi.searchTracks(searchQuery, { limit: 20 });

            if (searchResults.body.tracks.items.length === 0) {
                return interaction.reply(`‚ùå No encontr√© canciones para el g√©nero "${genre || 'pop'}". Intenta otro g√©nero.`);
            }

            // Seleccionar una canci√≥n aleatoria de las 20 canciones encontradas
            const randomIndex = Math.floor(Math.random() * searchResults.body.tracks.items.length);
            const track = searchResults.body.tracks.items[randomIndex]; // Tomamos la canci√≥n aleatoria

            // Responder con la canci√≥n recomendada
            await interaction.reply(`üé∂ Te recomiendo la canci√≥n: **${track.name}** por ${track.artists.map(a => a.name).join(', ')}. Esc√∫chala en Spotify: [${track.name}](${track.external_urls.spotify})`);
        } catch (error) {
            console.error('Error al obtener recomendaci√≥n de Spotify:', error);
            await interaction.reply('‚ùå Hubo un error al intentar recomendar una canci√≥n. Intenta nuevamente.');
        }
    },
};
